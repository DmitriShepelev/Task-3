using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Task_3
{
    public class Station
    {
       public PortController PortController { get; set; }
        public void OnPhoneOutgoingCall(object sender, CallEventArgs args)
        {
            Console.WriteLine($"Станция:Телефон пытается дозвонится по номеру {args.TargetPhoneNumber}");
            // нужен контроллер портов "определить в каком состоянии находится процесс инициации звонка"
            // телефоны станции не нужны, а вот порты - нужны, по портам будет выполнятся процесс поиска
            // например словарик - соответсвие порта телефонному номеру ??? по модели событий - не получится. нужен объект контроллера портов, внутри которого можно спрятать все необходимое
            // соответствия портов можно забрать до того как станция запустится, тогда на однин вид сущностей станция будет знать меньше (не нужны телефоны)

            PortController.Items.LastOrDefault().OnIncomingCall(sender, args);
        }
    }
}
//на станции несколько контейнеров 1. те звонки, которые в состоянии инициализации (соединение еще не произошло): либо один звонит другому, либо ожидает от него ответа (срабатывает на станции на первой стадии)
//далее можно модифицировать инф объект (добавить еще каких-нибудь состояний) и вернувшись опять на станцию можем н.п. перевести звонок в состояние дозвона (телефон второго непрерывно звонит)
// далее соединение может либо произойти, либо нет. Если да, то переводим объект из первого списка во второй - звонки которые сейчас текут. Но независимо от результата дозвона, должно происходить событие, которое можно назвать CallRecordCreate (это для биллинговой системы), общение с бил сис только через это событие (инжектировать ее в станцию не надо!)
// в бил сис должен быть обработчик события (OnCallRecordCreated()). Делаем прообраз БД, но на коллекциях. Внутри может быть коллекция объектов вида "Договор", коллекция оъектов вида "Информация о совершенном звонке", можно инжентировать зависимость на объект типа "Тарифный план" (желательно хорошо продумать, выделить Интерфейс - их у компании может быть несколько; выделить общий механизм расчета и заложить в бил сис для конечного итога расчетов по каждому абоненту исходя из общего механизма. т.е. - заложить ТП, список звонков и эта штуковина через "что-то такое общее" должна расчитать нам итоговую сумму; должна быть возможность смены тарифного плана). Модель данных сразу стройте как реляционную, т.е. соответствия вида первичный\внешний ключ не через ссылки на объекты, а через идентификаторы каких-то ссущностей. МиниБД, но только на коллекциях. подумать - карта соответствия между тел-ми и портами (номера тел-в - только в биллинговой системе). создать объекты портов и заматчить их на какие-то телефоны и в контроллере предусмотреть возможность смены порта для определенного телефона. 
// Отдельно стоят этап создания объектов. Отдельно - этап привязки. привязки могут быть как изначальными, так и строится "на ходу"(н.п. - назначили телефону порт, нужно что-то убрать, что-то привязать). И уже потом  - сценарий испольнения. Accept и Reject - это костыль, но костыль необходимый, что-бы не реализовывать в виде системы реального времени.